@using DevExtreme.AspNet.Mvc
@using DevExtreme.AspNet.Mvc.Builders
@using Application.Requests.Queries.Get_List_Oprostnik
@using Domain
 @model List_Oprostnik_Get.View_Model_Oprostnik
@{
    ViewData["Title"] = "Oprostnik";
    var cultureCookie = ViewBag.CultureCookie;
    var lang = Enums.EnUiLanguage.RU;
    if (cultureCookie =="ru") lang= Enums.EnUiLanguage.RU;
    else if (cultureCookie =="ro") lang= Enums.EnUiLanguage.RO;
    else if (cultureCookie =="en") lang= Enums.EnUiLanguage.EN;
    else lang= Enums.EnUiLanguage.RU;
}

<script src="~/js/Pages/Lincense_Group_Oprostnik/Oprostnik/Oprostnik_List_Express.js" asp-append-version="true"></script>

<script asp-append-version="true">
    function jsFunction(data) {
        var lang = '@lang';
        var name = JSON.parse(data.Name);
        return name[lang];
    }
</script>
<div class="card">
    <div class="card-body">
        <!-- DataGrid Start -->
        <div>
            @(Html.DevExtreme().DataGrid<List_Oprostnik_Get.View_Model_Oprostnik>()
                .ID("gridOprostnik")
                .ShowBorders(true)
                .ShowRowLines(true)
                .DataSource(new JS("ISNPS.load_dataSource('/Oprostnik_API/Oprostnik_List', 'gridOprostnik','DataGrid')"))
                // .OnInitialized("function() {ISNPS.load_dataSource('/Oprostnik_API/Oprostnik_List', 'gridOprostnik')}")
                // .DataSource(d => d
                // .WebApi()
                // .Controller("Oprostnik_API")
                // .Key("Oid")
                // .LoadAction("Oprostnik_List"))
                .FilterPanel(i => i.Visible(true))
                .FilterRow(filterRow =>
                {
                    filterRow.Visible(true);
                })
                .HeaderFilter(i => i.Visible(true))
                .ColumnChooser(columnChooser =>
                {
                    columnChooser.Enabled(true);
                })
                .HoverStateEnabled(true)
                .Scrolling(scrolling =>
                {
                    scrolling.RowRenderingMode(GridRowRenderingMode.Standard);
                })
                .Selection(selection =>
                {
                    selection.Mode(SelectionMode.Single);
                })
                .Grouping(grouping =>
                {
                    grouping.AutoExpandAll(true);
                })
                .GroupPanel(groupPanel =>
                {
                    groupPanel.Visible(true);
                })
                .AllowColumnResizing(true)
                .AllowColumnReordering(true)
                .SearchPanel(searchPanel =>
                {
                    searchPanel.Visible(true);
                    searchPanel.Width(240);
                    searchPanel.Placeholder("Search");
                })
                .LoadPanel(loadPanel =>
                {
                    loadPanel.Enabled(true);
                })
                .Paging(paging =>
                {
                    paging.PageSize(15);
                })
                .Pager(pager =>
                {
                    pager.Visible(true);
                    pager.ShowInfo(true);
                    pager.DisplayMode(GridPagerDisplayMode.Adaptive);
                    pager.ShowPageSizeSelector(true);
                    pager.ShowNavigationButtons(true);
                    pager.AllowedPageSizes(new int[] { 15, 25, 50 });
                })
                .Columns(c =>
                {
                    c.AddFor(i => i.Name).DataField("Name").Name(Localization.Name_Questionnaire).CalculateCellValue("jsFunction").Caption(Localization.Name_Questionnaire);
                    c.AddFor(i => i.CreateDate).DataField("CreateDate").Name("CreateDate").Caption(Localization.CreateDate).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy HH:mm");
                    c.AddFor(i => i.UpdateDate).DataField("UpdateDate").Name("UpdateDate").Caption(Localization.UpdateDate).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy HH:mm");
                    c.Add().DataField("Status").Caption(Localization.Status)
                    .Lookup(i =>
                    {
                        i.DataSource(new object[]
                    {
                        new { id =0, text = Localization.New },
                        new { id =1, text = Localization.Activated },
                        new { id =2, text = Localization.Deactivated }
                    });
                        i.ValueExpr("id");
                        i.DisplayExpr("text");
                    });

                    c.Add().Name("contextBtns").Type(GridCommandColumnType.Buttons)
                    .Buttons(buttons =>
                    {
                        buttons.Add().Name("edit").Icon("edit").OnClick("editButtonClicked").Visible(true);
                        buttons.Add().Name("linc_oprostnk").Icon("fa fa-info-circle").OnClick("lincButtonOrostnikClicked").Visible(true);
                        buttons.Add().Name("details").Icon("file").OnClick("infoButtonClicked").Visible(true);
                        // buttons.Add().Name("delit").Icon("remove").OnClick("deletButtonClicked").Visible(true);
                        buttons.Add().Name("Context").Icon("overflow").OnClick("onClickContextMenuBtn").Visible(true);
                    });
                })
                .Toolbar(toolbar =>
                {
                    toolbar.Items(items =>
                    {
                        items.Add()
                    .Location(ToolbarItemLocation.Before)
                    .Widget(widget => widget.Button()
                    .Text(Localization.Add_GroupQuestion)
                    .Icon("plus")
                    .ID("Add_item")
                    .StylingMode(ButtonStylingMode.Contained)
                    .Type(ButtonType.Success)
                    .OnClick("addGroupButtonClicked")
                    .Visible(true)
                    );
                        items.Add()
                    .Location(ToolbarItemLocation.After)
                    .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                    .Widget(widget => widget.Button()
                    .Icon("refresh")
                    .OnClick("refresh_Oprostnik_List")
                    .Visible(true)
                    );
                        items.Add()
                    .Location(ToolbarItemLocation.After)
                    .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                    .Name("searchPanel")
                    .Text(Localization.SearchPanel);
                    });
                })
                .OnContentReady("created_data_grid")
                )
        </div>
        <!-- DataGrid End -->
        @(
            Html.DevExtreme().ContextMenu()
            .ID("ActiveContext")
            .Target("null")
            .OnItemClick("onContextMenuItemClick")
            .Position(p => p.At(HorizontalAlignment.Left, VerticalAlignment.Bottom))
            .DataSource(d => d.Array()
            .Data(new List<object>{ new { id = "active", text = Localization.Activate },
        new { id = "delet", text = Localization.Delet }
        })))
        @(
            Html.DevExtreme().ContextMenu()
            .ID("DisabledContext")
            .Target("null")
            .OnItemClick("onContextMenuItemClick")
            .Position(p => p.At(HorizontalAlignment.Left, VerticalAlignment.Bottom))
            .DataSource(d => d.Array()
            .Data(new List<object>{ new { id = "disable", text = Localization.Disable },
        new { id = "delet", text = Localization.Delet }
        })))
    </div>
</div>
